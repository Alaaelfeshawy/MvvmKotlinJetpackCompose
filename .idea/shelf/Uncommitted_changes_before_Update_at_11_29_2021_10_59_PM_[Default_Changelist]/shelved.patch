Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-kapt'\r\n    id 'dagger.hilt.android.plugin'\r\n}\r\n\r\nandroid {\r\n    compileSdk 31\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.MvvmKotlinJetpackCompose\"\r\n        minSdk 21\r\n        targetSdk 31\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n        useIR = true\r\n    }\r\n    buildFeatures {\r\n        compose true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion '1.0.5'\r\n        kotlinCompilerVersion '1.5.30'\r\n    }\r\n    packagingOptions {\r\n        resources {\r\n            excludes += '/META-INF/{AL2.0,LGPL2.1}'\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.core:core-ktx:1.7.0'\r\n    implementation 'androidx.appcompat:appcompat:1.3.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation \"org.jetbrains.kotlin:kotlin-reflect:1.5.30\"\r\n\r\n    //compose\r\n    implementation \"androidx.compose.ui:ui:1.0.5\"\r\n    implementation \"androidx.compose.material:material:1.0.5\"\r\n    implementation \"androidx.compose.ui:ui-tooling-preview:1.0.5\"\r\n    implementation 'androidx.activity:activity-compose:1.4.0'\r\n    implementation \"androidx.compose.runtime:runtime-livedata:1.0.5\"\r\n\r\n    debugImplementation \"androidx.compose.ui:ui-tooling:1.0.5\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0\"\r\n    implementation \"androidx.navigation:navigation-compose:2.4.0-beta02\"\r\n\r\n\r\n    //hilt DI\r\n    implementation \"com.google.dagger:hilt-android:$hilt_version\"\r\n    kapt \"com.google.dagger:hilt-android-compiler:$hilt_version\"\r\n\r\n    //lifecycle\r\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'\r\n\r\n    //coroutines\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version\"\r\n\r\n    //retrofit\r\n    implementation \"com.squareup.retrofit2:converter-moshi:$retrofitVersion\"\r\n    implementation \"com.squareup.moshi:moshi:$moshiVersion\"\r\n    kapt \"com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion\"\r\n    implementation \"com.squareup.okhttp3:logging-interceptor:$okhttpInterceptorVersion\"\r\n\r\n\r\n    //test\r\n    testImplementation 'junit:junit:4.13.2'\r\n    testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_test_version\"\r\n    testImplementation 'io.mockk:mockk:1.12.0'\r\n    testImplementation 'androidx.arch.core:core-testing:2.1.0'\r\n\r\n    //integration test\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation \"androidx.compose.ui:ui-test-junit4:1.0.5\"\r\n    androidTestImplementation \"com.google.dagger:hilt-android-testing:$hilt_version\"\r\n    kaptAndroidTest \"com.google.dagger:hilt-android-compiler:$hilt_version\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/build.gradle	(date 1638186755072)
@@ -53,7 +53,7 @@
 dependencies {
 
     implementation 'androidx.core:core-ktx:1.7.0'
-    implementation 'androidx.appcompat:appcompat:1.3.1'
+    implementation 'androidx.appcompat:appcompat:1.4.0'
     implementation 'com.google.android.material:material:1.4.0'
     implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.30"
 
Index: app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/BaseInstrument.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/BaseInstrument.kt b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/BaseInstrument.kt
new file mode 100644
--- /dev/null	(date 1638193908192)
+++ b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/BaseInstrument.kt	(date 1638193908192)
@@ -0,0 +1,22 @@
+package com.example.mvvmKotlinJetpackCompose.ui
+
+import android.app.Activity
+import androidx.activity.ComponentActivity
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.ui.test.junit4.AndroidComposeTestRule
+import androidx.compose.ui.test.junit4.createAndroidComposeRule
+import androidx.test.ext.junit.rules.ActivityScenarioRule
+import com.example.mvvmKotlinJetpackCompose.ui.splash.SplashActivity
+import org.junit.Before
+import org.junit.Rule
+
+@ExperimentalFoundationApi
+abstract class BaseInstrument {
+
+
+
+    @Before
+    abstract fun setUp()
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DashboardCompose.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.dashboard\r\n\r\nimport android.content.res.Configuration.UI_MODE_NIGHT_NO\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.GridCells\r\nimport androidx.compose.foundation.lazy.LazyVerticalGrid\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.dimensionResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.DashboardResponse\r\nimport com.example.mvvmKotlinJetpackCompose.data.others.MenuItem\r\nimport com.example.mvvmKotlinJetpackCompose.ui.dashboard.compose.TopBar\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport kotlinx.coroutines.CoroutineScope\r\n\r\n\r\n\r\n@ExperimentalFoundationApi\r\n@Composable\r\nfun DashboardContent(menuItems: List<MenuItem>, openActivity: (String) -> Unit={}) {\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\r\n        Menu(menuItems, openActivity)\r\n        Spacer(modifier = Modifier\r\n            .height(dimensionResource(R.dimen.dp_80)))\r\n        Image(painter = painterResource(R.drawable.jetpack_logo),\r\n            modifier = Modifier\r\n                .width(dimensionResource(id = R.dimen.dp_145))\r\n                .height(dimensionResource(id = R.dimen.dp_145)),\r\n            contentDescription = \"\")\r\n\r\n        Spacer(modifier = Modifier\r\n            .height(dimensionResource(R.dimen.dp_100)))\r\n    }\r\n\r\n}\r\n\r\n@ExperimentalFoundationApi\r\n@Composable\r\nprivate fun Menu(menuItems: List<MenuItem>, openActivity: (String) -> Unit) {\r\n\r\n\r\n    LazyVerticalGrid(\r\n        cells = GridCells.Fixed(4),\r\n    ) {\r\n        items(menuItems) { item ->\r\n            MenuItemCompose(Modifier\r\n                .padding(top = dimensionResource(R.dimen.dp_40)),\r\n                iconId = item.icon,\r\n                title = item.text,\r\n                onClick = {\r\n                    openActivity(it)\r\n\r\n                }, color = MaterialTheme.colors.primary)\r\n\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MenuItemCompose(\r\n    modifier: Modifier = Modifier, iconId: Int,\r\n    title: String,\r\n    onClick: (String) -> Unit,\r\n    color: Color,\r\n) {\r\n    Column(modifier\r\n\r\n        .clickable { onClick(title) },\r\n        horizontalAlignment = Alignment.CenterHorizontally)\r\n    {\r\n        Image(modifier = Modifier\r\n            .width(dimensionResource(R.dimen.dp_40))\r\n            .height(dimensionResource(R.dimen.dp_40)),\r\n            painter = painterResource(iconId),\r\n            contentDescription = \"\")\r\n        Spacer(modifier = Modifier.height(dimensionResource(R.dimen.dp_5)))\r\n        Text(\r\n            text = title.uppercase(),\r\n            color = color,\r\n            style = MaterialTheme.typography.caption,\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DashboardCompose.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DashboardCompose.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DashboardCompose.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DashboardCompose.kt	(date 1638186944348)
@@ -1,6 +1,5 @@
 package com.example.mvvmKotlinJetpackCompose.ui.dashboard
 
-import android.content.res.Configuration.UI_MODE_NIGHT_NO
 import androidx.compose.foundation.ExperimentalFoundationApi
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.clickable
@@ -8,32 +7,25 @@
 import androidx.compose.foundation.lazy.GridCells
 import androidx.compose.foundation.lazy.LazyVerticalGrid
 import androidx.compose.foundation.lazy.items
-import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.dimensionResource
 import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.navigation.NavController
-import androidx.navigation.compose.rememberNavController
+import androidx.compose.ui.res.stringResource
 import com.example.mvvmKotlinJetpackCompose.R
-import com.example.mvvmKotlinJetpackCompose.data.network.model.DashboardResponse
 import com.example.mvvmKotlinJetpackCompose.data.others.MenuItem
-import com.example.mvvmKotlinJetpackCompose.ui.dashboard.compose.TopBar
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
-import kotlinx.coroutines.CoroutineScope
-
 
 
 @ExperimentalFoundationApi
 @Composable
 fun DashboardContent(menuItems: List<MenuItem>, openActivity: (String) -> Unit={}) {
 
-    Column(horizontalAlignment = Alignment.CenterHorizontally) {
+    Column(horizontalAlignment = Alignment.CenterHorizontally,
+    modifier = Modifier.testTag(stringResource(id = R.string.dashboard_content_tag))) {
         Menu(menuItems, openActivity)
         Spacer(modifier = Modifier
             .height(dimensionResource(R.dimen.dp_80)))
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/util/AppConstants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.util\r\n\r\n\r\nconst val PREF_NAME = \"Liquor_coin_pref\"\r\nconst val PREF_KEY_USER_LOGGED_IN_MODE = \"PREF_KEY_USER_LOGGED_IN_MODE\"\r\nconst val PREF_KEY_CURRENT_USER_ID = \"PREF_KEY_CURRENT_USER_ID\"\r\nconst val PREF_KEY_CURRENT_USER_NAME = \"PREF_KEY_CURRENT_USER_NAME\"\r\nconst val PREF_KEY_CURRENT_USER_EMAIL = \"PREF_KEY_CURRENT_USER_EMAIL\"\r\nconst val PREF_KEY_CURRENT_USER_PROFILE_PIC_URL = \"PREF_KEY_CURRENT_USER_PROFILE_PIC_URL\"\r\nconst val PREF_KEY_ACCESS_TOKEN = \"PREF_KEY_ACCESS_TOKEN\"\r\nconst val NULL_INDEX = \"-1\"\r\n\r\nconst val NO_INTERNET_CONNECTION = \"No network Connection !\"\r\nconst val NETWORK_ERROR = -2\r\nconst val ENTER_PASSWORD = \"Please enter Password.\"\r\nconst val ENTER_EMAIL_ID = \"Please enter Email Id.\"\r\nconst val SOMETHING_WENT_WRONG =\"Something went Wrong\"\r\nconst val CLIENT_SIDE_ERROR =\"Client side error\"\r\nconst val SERVER_SIDE_ERROR =\"Server side error\"\r\n\r\nenum class LoggedInMode(val type: Int) {\r\n    LOGGED_IN_MODE_LOGGED_OUT(0),\r\n    LOGGED_IN_MODE_GOOGLE(1),\r\n    LOGGED_IN_MODE_FB(2),\r\n    LOGGED_IN_MODE_SERVER(3);\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/util/AppConstants.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/util/AppConstants.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/util/AppConstants.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/util/AppConstants.kt	(date 1638183998909)
@@ -18,6 +18,8 @@
 const val CLIENT_SIDE_ERROR ="Client side error"
 const val SERVER_SIDE_ERROR ="Server side error"
 
+
+
 enum class LoggedInMode(val type: Int) {
     LOGGED_IN_MODE_LOGGED_OUT(0),
     LOGGED_IN_MODE_GOOGLE(1),
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/BottomNavData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.dashboard\r\n\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\n\r\nenum class BottomNavData(val route:String,val iconId:Int,val title:String) {\r\n    Home(\"home\", R.drawable.ic_baseline_home_24,\"Home\"),\r\n    History(\"history\", R.drawable.ic_baseline_history_24,\"History\"),\r\n    Other(\"other\", R.drawable.ic_baseline_settings_24,\"Other\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/BottomNavData.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/BottomNavData.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/BottomNavData.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/BottomNavData.kt	(date 1638191816072)
@@ -2,8 +2,12 @@
 
 import com.example.mvvmKotlinJetpackCompose.R
 
+const val home="Home"
+const val history="History"
+const val other="Other"
+
 enum class BottomNavData(val route:String,val iconId:Int,val title:String) {
-    Home("home", R.drawable.ic_baseline_home_24,"Home"),
-    History("history", R.drawable.ic_baseline_history_24,"History"),
-    Other("other", R.drawable.ic_baseline_settings_24,"Other")
+    Home("home", R.drawable.ic_baseline_home_24,home),
+    History("history", R.drawable.ic_baseline_history_24,history),
+    Other("other", R.drawable.ic_baseline_settings_24,other)
 }
\ No newline at end of file
Index: app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivityTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivityTest.kt b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivityTest.kt
new file mode 100644
--- /dev/null	(date 1638193908208)
+++ b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivityTest.kt	(date 1638193908208)
@@ -0,0 +1,87 @@
+package com.example.mvvmKotlinJetpackCompose.ui.login
+
+import androidx.activity.ComponentActivity
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.ui.test.*
+import androidx.compose.ui.test.junit4.createAndroidComposeRule
+import com.example.mvvmKotlinJetpackCompose.R
+import com.example.mvvmKotlinJetpackCompose.ui.BaseInstrument
+import com.example.mvvmKotlinJetpackCompose.util.ENTER_EMAIL_ID
+import com.example.mvvmKotlinJetpackCompose.util.ENTER_PASSWORD
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+
+@ExperimentalFoundationApi
+class LoginActivityTest : BaseInstrument(){
+    //    @get:Rule
+//    val composeRule=createAndroidComposeRule()//if you want to test only single composable
+
+    @get : Rule
+    val composeTestRule = createAndroidComposeRule(LoginActivity::class.java)
+    lateinit var activity: ComponentActivity
+
+    @Before
+   override fun setUp() {
+        activity = composeTestRule.activity
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.email_address))
+            .performTextClearance()
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.password))
+            .performTextClearance()
+    }
+
+    @Test
+    fun login_emptyEmail_showMessage() {
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.password))
+            .performTextInput("12323")
+
+        composeTestRule.onNodeWithTag(activity.getString(R.string.sign_in))
+            .performClick()
+
+        composeTestRule.onNodeWithText(ENTER_EMAIL_ID)
+            .assertIsDisplayed()
+
+
+    }
+
+
+    @Test
+    fun login_emptyPass_showMessage() {
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.email_address))
+            .performTextInput("12323")
+
+        composeTestRule.onNodeWithTag(activity.getString(R.string.sign_in))
+            .performClick()
+
+        composeTestRule.onNodeWithText(ENTER_PASSWORD)
+            .assertIsDisplayed()
+
+
+    }
+
+    @Test
+    fun login_filledEmailAndPass_openDashboard() {
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.email_address))
+            .performTextInput("suorizwansayyed786@gmail.com")
+
+        composeTestRule
+            .onNodeWithTag(activity.getString(R.string.password))
+            .performTextInput("SuoRizwan")
+
+        composeTestRule.onNodeWithTag(activity.getString(R.string.sign_in))
+            .performClick()
+
+        composeTestRule.
+                onNodeWithTag(activity.getString(R.string.dashboard_content_tag))
+            .assertIsDisplayed()
+
+    }
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.base\r\n\r\nimport androidx.annotation.VisibleForTesting\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.DataError\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Resource\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.util.SOMETHING_WENT_WRONG\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.DispatcherProvider\r\nimport kotlinx.coroutines.CoroutineExceptionHandler\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.launch\r\n\r\nopen class BaseViewModel<R : BaseRepository>(\r\n    private val repository: R,\r\n    private val appDispatcher: DispatcherProvider,\r\n) : ViewModel() {\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    val showDialogLoadingPrivate = MutableLiveData(false)\r\n\r\n    val showMessageDialog = MutableLiveData<Resource<String>>()\r\n\r\n    private val onErrorDialogDissmissPrivate = MutableLiveData<Resource<Boolean>>()\r\n    val onErrorDialogDismiss: LiveData<Resource<Boolean>> get() = onErrorDialogDissmissPrivate\r\n\r\n    protected val exceptionHandler = CoroutineExceptionHandler { context, exception ->\r\n        hideLoading()\r\n        showMessageDialog(DataError(SOMETHING_WENT_WRONG))\r\n\r\n    }\r\n\r\n\r\n    fun isLoading(): Boolean {\r\n        return showDialogLoadingPrivate.value!!\r\n    }\r\n\r\n\r\n    fun showLoading() {\r\n        if (!showDialogLoadingPrivate.value!!) {\r\n            showDialogLoadingPrivate.value = true\r\n        }\r\n\r\n    }\r\n\r\n    fun hideLoading() {\r\n        if (showDialogLoadingPrivate.value!!) {\r\n            showDialogLoadingPrivate.value = false\r\n        }\r\n    }\r\n\r\n    fun getRepo(): R {\r\n        return repository\r\n    }\r\n\r\n    fun getAppDispatcher(): DispatcherProvider {\r\n        return appDispatcher\r\n    }\r\n\r\n    fun showMessageDialog(dataError: DataError<String>) {\r\n        showMessageDialog.value = dataError\r\n    }\r\n\r\n    fun showPostMessageDialog(dataError: DataError<String>) {\r\n        showMessageDialog.value = dataError\r\n    }\r\n\r\n    fun hideMessageDialog(success: Success<String>) {\r\n        showMessageDialog.value = success\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseViewModel.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseViewModel.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseViewModel.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseViewModel.kt	(date 1638203992763)
@@ -4,15 +4,12 @@
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
-import androidx.lifecycle.viewModelScope
 import com.example.mvvmKotlinJetpackCompose.data.network.DataError
 import com.example.mvvmKotlinJetpackCompose.data.network.Resource
 import com.example.mvvmKotlinJetpackCompose.data.network.Success
 import com.example.mvvmKotlinJetpackCompose.util.SOMETHING_WENT_WRONG
 import com.example.mvvmKotlinJetpackCompose.util.coroutines.DispatcherProvider
 import kotlinx.coroutines.CoroutineExceptionHandler
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.launch
 
 open class BaseViewModel<R : BaseRepository>(
     private val repository: R,
@@ -24,8 +21,8 @@
 
     val showMessageDialog = MutableLiveData<Resource<String>>()
 
-    private val onErrorDialogDissmissPrivate = MutableLiveData<Resource<Boolean>>()
-    val onErrorDialogDismiss: LiveData<Resource<Boolean>> get() = onErrorDialogDissmissPrivate
+    private val onErrorDialogDismissPrivate = MutableLiveData<Resource<Boolean>>()
+    val onErrorDialogDismiss: LiveData<Resource<Boolean>> get() = onErrorDialogDismissPrivate
 
     protected val exceptionHandler = CoroutineExceptionHandler { context, exception ->
         hideLoading()
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseComponentActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.base\r\n\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.window.Dialog\r\nimport androidx.compose.ui.window.DialogProperties\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.DataError\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.White\r\n\r\nabstract class BaseComponentActivity<VM : BaseViewModel<*>> : ComponentActivity() {\r\n\r\n    abstract val viewModel: VM\r\n\r\n    //override in child class if you don't want to use global loading state\r\n    open val wantToShowCustomLoading = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            LiquorCoinTheme {\r\n                ProvideCompose()\r\n                SetUpLoadingDialog()\r\n                SetUpErrorDialog()\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Composable\r\n    private fun SetUpLoadingDialog() {\r\n        if (!wantToShowCustomLoading) {\r\n            val loadingValue = viewModel.showDialogLoadingPrivate.observeAsState()\r\n\r\n            if (loadingValue.value == true) {\r\n                ShowLoading()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @Composable\r\n    private fun SetUpErrorDialog() {\r\n        var dialogState = false\r\n        var errorDescription = \"\"\r\n        val vmLoadinState = viewModel.showMessageDialog.observeAsState()\r\n        when (vmLoadinState.value) {\r\n            is DataError -> {\r\n                errorDescription = (vmLoadinState.value as DataError<String>).errorDescription\r\n                dialogState = true\r\n            }\r\n\r\n            is Success -> {\r\n                dialogState = false\r\n            }\r\n        }\r\n        if (dialogState) {\r\n            ShowErrorDialog(errorDescription)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    @Composable\r\n    protected open fun ShowLoading() {\r\n\r\n        Dialog(\r\n            onDismissRequest = { viewModel.hideLoading() },\r\n            DialogProperties(dismissOnBackPress = false, dismissOnClickOutside = false)\r\n        ) {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier = Modifier\r\n                    .size(100.dp)\r\n                    .background(White, shape = RoundedCornerShape(8.dp))\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    private fun ShowErrorDialog(errorDescription: String) {\r\n\r\n        AlertDialog(\r\n            onDismissRequest = {\r\n            },\r\n\r\n            title = {\r\n                Text(stringResource(R.string.error), style = MaterialTheme.typography.h4)\r\n            },\r\n            text = {\r\n                Text(errorDescription, fontSize = 16.sp)\r\n            },\r\n            confirmButton = {\r\n            },\r\n\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        viewModel.hideMessageDialog(Success(\"\"))\r\n                    }) {\r\n                    Text(\r\n                        \"Ok\",\r\n                        style = MaterialTheme.typography.body1,\r\n                        color = MaterialTheme.colors.onSecondary\r\n                    )\r\n                }\r\n            },\r\n            backgroundColor = MaterialTheme.colors.secondary,\r\n            contentColor = Color.White\r\n        )\r\n\r\n    }\r\n\r\n\r\n    @Composable\r\n    abstract fun ProvideCompose()\r\n\r\n    @Composable\r\n    abstract fun ProvideComposeLightPreview()\r\n\r\n\r\n    inline fun <reified T : ComponentActivity> Context.startActivity(block: Intent.() -> Unit = {}) {\r\n\r\n        startActivity(Intent(this, T::class.java).apply(block))\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseComponentActivity.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseComponentActivity.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseComponentActivity.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/base/BaseComponentActivity.kt	(date 1638172496808)
@@ -24,7 +24,7 @@
 import com.example.mvvmKotlinJetpackCompose.R
 import com.example.mvvmKotlinJetpackCompose.data.network.DataError
 import com.example.mvvmKotlinJetpackCompose.data.network.Success
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
+import com.example.mvvmKotlinJetpackCompose.ui.theme.CoinTheme
 import com.example.mvvmKotlinJetpackCompose.ui.theme.White
 
 abstract class BaseComponentActivity<VM : BaseViewModel<*>> : ComponentActivity() {
@@ -37,7 +37,7 @@
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContent {
-            LiquorCoinTheme {
+            CoinTheme {
                 ProvideCompose()
                 SetUpLoadingDialog()
                 SetUpErrorDialog()
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/ServiceGenerator.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.data.network\r\n\r\nimport com.example.mvvmKotlinJetpackCompose.BuildConfig\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.moshiFactories.MyKotlinJsonAdapterFactory\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.moshiFactories.MyStandardJsonAdapters\r\nimport com.squareup.moshi.Moshi\r\nimport okhttp3.Interceptor\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.moshi.MoshiConverterFactory\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\nprivate const val timeoutRead = 30\r\nprivate const val contentType = \"Content-Type\"\r\nprivate const val contentTypeValue = \"application/json\"\r\nprivate const val timeoutConnect = 30\r\nprivate const val baseUrl=\"https://your.com/Api/\"\r\n\r\n@Singleton\r\nclass ServiceGenerator  @Inject constructor(){\r\n\r\n    private var retrofit: Retrofit\r\n    private val okHttpBuilder: OkHttpClient.Builder = OkHttpClient.Builder()\r\n    var protectedApiHeader:ApiHeader.ProtectedApiHeader= ApiHeader.ProtectedApiHeader(\"\",\"\",\"\")\r\n\r\n    private var headerInterceptor = Interceptor { chain ->\r\n        val original = chain.request()\r\n\r\n        val request = original.newBuilder()\r\n            .header(contentType, contentTypeValue)\r\n            .header(\"Authorization\", \"Bearer \" + protectedApiHeader.accessToken)\r\n            .method(original.method, original.body)\r\n            .build()\r\n\r\n        chain.proceed(request)\r\n    }\r\n\r\n    private val logger: HttpLoggingInterceptor\r\n      get() {\r\n            val loggingInterceptor = HttpLoggingInterceptor()\r\n            if (BuildConfig.DEBUG) {\r\n                loggingInterceptor.apply { level = HttpLoggingInterceptor.Level.BODY }\r\n            }\r\n            return loggingInterceptor\r\n        }\r\n\r\n    var client: OkHttpClient\r\n\r\n\r\n    init {\r\n        okHttpBuilder.addInterceptor(headerInterceptor)\r\n        okHttpBuilder.addInterceptor(logger)\r\n        okHttpBuilder.connectTimeout(timeoutConnect.toLong(), TimeUnit.SECONDS)\r\n        okHttpBuilder.readTimeout(timeoutRead.toLong(), TimeUnit.SECONDS)\r\n        client = okHttpBuilder.build()\r\n        retrofit = Retrofit.Builder()\r\n            .baseUrl(baseUrl)\r\n            .client(client)\r\n            .addConverterFactory(MoshiConverterFactory.create(getMoshi()))\r\n            .build()\r\n\r\n    }\r\n\r\n    fun <S> createService(serviceClass:Class<S>):S{\r\n       return  retrofit.create(serviceClass)\r\n    }\r\n\r\n    private fun getMoshi(): Moshi {\r\n        return Moshi.Builder()\r\n            .add(MyStandardJsonAdapters.FACTORY)\r\n            .add(MyKotlinJsonAdapterFactory())\r\n\r\n            .build()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/ServiceGenerator.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/ServiceGenerator.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/ServiceGenerator.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/ServiceGenerator.kt	(date 1638185679730)
@@ -64,8 +64,8 @@
 
     }
 
-    fun <S> createService(serviceClass:Class<S>):S{
-       return  retrofit.create(serviceClass)
+    fun  getService(): Service {
+       return  retrofit.create(Service::class.java)
     }
 
     private fun getMoshi(): Moshi {
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.splash\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.activity.viewModels\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.CircularProgressIndicator\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Text\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.dimensionResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseComponentActivity\r\nimport com.example.mvvmKotlinJetpackCompose.ui.dashboard.DashboardActivity\r\nimport com.example.mvvmKotlinJetpackCompose.ui.login.LoginActivity\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport com.example.mvvmKotlinJetpackCompose.util.observeEvent\r\nimport dagger.hilt.android.AndroidEntryPoint\r\n\r\n@ExperimentalFoundationApi\r\n@AndroidEntryPoint\r\nclass SplashActivity : BaseComponentActivity<SplashViewModel>() {\r\n\r\n    override val viewModel: SplashViewModel by viewModels()\r\n\r\n    override val wantToShowCustomLoading=true\r\n\r\n    @Composable\r\n    override fun ProvideCompose() {\r\n        viewModel.decideActivity()\r\n\r\n        SplashCompose {\r\n                ImageAndAppName {\r\n                    val loadingValue = viewModel.isLoading()\r\n\r\n                    observeEvent(viewModel.singleEventOpenActivity) {\r\n                        when (val result = it.getContentIfNotHandled()) {\r\n                            is Success -> {\r\n                                if (result.data == 1) {\r\n                                    startActivity<DashboardActivity>()\r\n                                } else {\r\n                                    startActivity<LoginActivity>()\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    if (loadingValue) {\r\n\r\n                        CircularProgressIndicator()\r\n                    }\r\n\r\n                }\r\n\r\n        }\r\n    }\r\n\r\n    @Composable\r\n    private fun SplashCompose(ChildrenCompose: @Composable () -> Unit) {\r\n\r\n        Box(Modifier.fillMaxSize(),\r\n            contentAlignment = Alignment.TopCenter) {\r\n            ChildrenCompose()\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    private fun ImageAndAppName(showLoading: @Composable () -> Unit) {\r\n\r\n        Column(horizontalAlignment = Alignment.CenterHorizontally) {\r\n            Image(painter = painterResource(R.drawable.jetpack_logo),\r\n                modifier = Modifier\r\n                    .padding(top = dimensionResource(id = R.dimen.dp_100))\r\n                    .width(dimensionResource(id = R.dimen.dp_120))\r\n                    .height(dimensionResource(id = R.dimen.dp_120)),\r\n                contentDescription = \"\")\r\n\r\n            Text(modifier = Modifier.width(IntrinsicSize.Max),\r\n                text = stringResource(id = R.string.app_name),\r\n                textAlign = TextAlign.Center,\r\n                color = MaterialTheme.colors.secondary,\r\n                style = MaterialTheme.typography.h6)\r\n\r\n            Spacer(modifier = Modifier.height(dimensionResource(R.dimen.dp_20)))\r\n            showLoading()\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @Preview(\r\n        showBackground = true,\r\n        uiMode = Configuration.UI_MODE_NIGHT_NO\r\n    )\r\n    @Composable\r\n    override fun ProvideComposeLightPreview() {\r\n        LiquorCoinTheme {\r\n\r\n            SplashCompose {\r\n                ImageAndAppName {\r\n                    CircularProgressIndicator()\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivity.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivity.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivity.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivity.kt	(date 1638179375388)
@@ -4,7 +4,6 @@
 import androidx.activity.viewModels
 import androidx.compose.foundation.ExperimentalFoundationApi
 import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.CircularProgressIndicator
 import androidx.compose.material.MaterialTheme
@@ -12,7 +11,7 @@
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.dimensionResource
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
@@ -23,7 +22,7 @@
 import com.example.mvvmKotlinJetpackCompose.ui.base.BaseComponentActivity
 import com.example.mvvmKotlinJetpackCompose.ui.dashboard.DashboardActivity
 import com.example.mvvmKotlinJetpackCompose.ui.login.LoginActivity
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
+import com.example.mvvmKotlinJetpackCompose.ui.theme.CoinTheme
 import com.example.mvvmKotlinJetpackCompose.util.observeEvent
 import dagger.hilt.android.AndroidEntryPoint
 
@@ -59,7 +58,9 @@
                     }
                     if (loadingValue) {
 
-                        CircularProgressIndicator()
+                        CircularProgressIndicator(Modifier.testTag(
+                            getString(R.string.test_tag_circular_progress)
+                        ))
                     }
 
                 }
@@ -108,7 +109,7 @@
     )
     @Composable
     override fun ProvideComposeLightPreview() {
-        LiquorCoinTheme {
+        CoinTheme {
 
             SplashCompose {
                 ImageAndAppName {
Index: app/src/test/java/com/example/mvvmKotlinJetpackCompose/ui/login/RegistrationRepoTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.login\r\n\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.ApiHelper\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Resource\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.LoginResponse\r\nimport com.example.mvvmKotlinJetpackCompose.data.prefs.PreferencesHelper\r\nimport com.example.mvvmKotlinJetpackCompose.util.NO_INTERNET_CONNECTION\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDataClassGenerator\r\nimport io.mockk.*\r\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\r\nimport kotlinx.coroutines.flow.first\r\nimport kotlinx.coroutines.flow.map\r\nimport kotlinx.coroutines.test.runBlockingTest\r\nimport org.junit.Assert.assertEquals\r\nimport org.junit.Before\r\nimport org.junit.Test\r\n\r\nclass RegistrationRepoTest {\r\n\r\n\r\n    lateinit var apiHelper: ApiHelper\r\n\r\n    lateinit var preferencesHelper: PreferencesHelper\r\n\r\n    lateinit var repoUnderTest: RegistrationRepo\r\n\r\n    protected val testDataClassGenerator: TestDataClassGenerator = TestDataClassGenerator()\r\n\r\n    @Before\r\n    fun setTup() {\r\n        apiHelper = mockk(relaxUnitFun = true)\r\n        preferencesHelper = mockk(relaxUnitFun = true)\r\n        repoUnderTest = RegistrationRepo(apiHelper, preferencesHelper)\r\n\r\n    }\r\n\r\n    @Test\r\n    fun `login , success response,verify setUserLoggedIn and update token`() {\r\n\r\n        //Given\r\n        every {\r\n            apiHelper.login(\r\n                any(),\r\n                any()\r\n            )\r\n        } returns testDataClassGenerator.getSuccessLoginResponse()\r\n\r\n\r\n        //when\r\n        var result: Resource<LoginResponse>? = null\r\n\r\n        runBlockingTest  {\r\n            result =  repoUnderTest.login(\"\", \"\").first()\r\n        }\r\n\r\n        //then\r\n        assertEquals(true, result!!.data!!.status)\r\n        verify {\r\n\r\n            preferencesHelper.setUserLoggedIn(\r\n                result!!.data!!.data.userId,\r\n                result!!.data!!.data.userType,\r\n                result!!.data!!.data.userId,\r\n                result!!.data!!.data.token\r\n            )\r\n\r\n            apiHelper.updateToken(any())\r\n        }\r\n    }\r\n\r\n    @OptIn(ExperimentalCoroutinesApi::class)\r\n    @Test\r\n    fun `login ,response false,assert response msg but don't verify setUserLoggedIn and update token`() {\r\n\r\n        //Given\r\n        every {\r\n            apiHelper.login(\r\n                any(),\r\n                any()\r\n            )\r\n        } returns testDataClassGenerator.getFailedLoginResponse()\r\n\r\n        //when\r\n        var result: Resource<LoginResponse>? = null\r\n\r\n        runBlockingTest  {\r\n            result =  repoUnderTest.login(\"\", \"\").first()\r\n        }\r\n\r\n        //then\r\n        assertEquals(\"User login Unsuccessful\", result!!.errorDescription)\r\n\r\n        verify(exactly = 0) {\r\n            preferencesHelper.setUserLoggedIn(any(), any(), any(), any())\r\n            apiHelper.updateToken(any())\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @OptIn(ExperimentalCoroutinesApi::class)\r\n    @Test\r\n    fun `login , no network ,assert no network error description but don't verify setUserLoggedIn and update token`() {\r\n\r\n        //Given\r\n        every {\r\n            apiHelper.login(\r\n                any(),\r\n                any()\r\n            )\r\n        } returns testDataClassGenerator.getNoNetworkError() as Resource<LoginResponse>\r\n\r\n\r\n        //when\r\n        var result: Resource<LoginResponse>? = null\r\n        runBlockingTest  {\r\n            result =  repoUnderTest.login(\"\", \"\").first()\r\n        }\r\n\r\n\r\n        //then\r\n        assertEquals(NO_INTERNET_CONNECTION, result!!.errorDescription)\r\n\r\n        verify(exactly = 0) {\r\n            preferencesHelper.setUserLoggedIn(any(), any(), any(), any())\r\n            apiHelper.updateToken(any())\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/ui/login/RegistrationRepoTest.kt b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/ui/login/RegistrationRepoTest.kt
--- a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/ui/login/RegistrationRepoTest.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/ui/login/RegistrationRepoTest.kt	(date 1638180056102)
@@ -2,15 +2,13 @@
 
 import com.example.mvvmKotlinJetpackCompose.data.network.ApiHelper
 import com.example.mvvmKotlinJetpackCompose.data.network.Resource
-import com.example.mvvmKotlinJetpackCompose.data.network.Success
 import com.example.mvvmKotlinJetpackCompose.data.network.model.LoginResponse
 import com.example.mvvmKotlinJetpackCompose.data.prefs.PreferencesHelper
 import com.example.mvvmKotlinJetpackCompose.util.NO_INTERNET_CONNECTION
-import com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDataClassGenerator
+import com.example.mvvmKotlinJetpackCompose.TestDataClassGenerator
 import io.mockk.*
 import kotlinx.coroutines.ExperimentalCoroutinesApi
 import kotlinx.coroutines.flow.first
-import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.test.runBlockingTest
 import org.junit.Assert.assertEquals
 import org.junit.Before
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/theme/Theme.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.theme\r\n\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.lightColors\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.graphics.Color.Companion.Black\r\n\r\n\r\nprivate val LightColorPalette = lightColors(\r\n    primary = DarkGray,\r\n    primaryVariant = Gray,\r\n    secondary = LightPurple,\r\n    onPrimary = Black,\r\n    onSecondary = White,\r\n\r\n    /* Other default colors to override\r\n    background = Color.White,\r\n    surface = Color.White,\r\n    onPrimary = Color.White,\r\n    onSecondary = Color.Black,\r\n    onBackground = Color.Black,\r\n    onSurface = Color.Black,\r\n    */\r\n)\r\n\r\n\r\n\r\n@Composable\r\nfun LiquorCoinTheme(content: @Composable() () -> Unit) {\r\n\r\n\r\n    MaterialTheme(\r\n        colors = LightColorPalette,\r\n        typography = Typography,\r\n        shapes = Shapes,\r\n        content = content\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/theme/Theme.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/theme/Theme.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/theme/Theme.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/theme/Theme.kt	(date 1638172496908)
@@ -26,7 +26,7 @@
 
 
 @Composable
-fun LiquorCoinTheme(content: @Composable() () -> Unit) {
+fun CoinTheme(content: @Composable() () -> Unit) {
 
 
     MaterialTheme(
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.splash\r\n\r\nimport androidx.annotation.VisibleForTesting\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Resource\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseViewModel\r\nimport com.example.mvvmKotlinJetpackCompose.ui.login.RegistrationRepo\r\nimport com.example.mvvmKotlinJetpackCompose.util.LoggedInMode\r\nimport com.example.mvvmKotlinJetpackCompose.util.SingleEvent\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.DispatcherProvider\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.FlowPreview\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.flow.collect\r\nimport kotlinx.coroutines.flow.flow\r\nimport kotlinx.coroutines.flow.flowOn\r\nimport kotlinx.coroutines.flow.zip\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass SplashViewModel @Inject constructor(\r\n    registrationRepo: RegistrationRepo,\r\n    appDispatcher: DispatcherProvider,\r\n) : BaseViewModel<RegistrationRepo>(registrationRepo, appDispatcher) {\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    val privateSingleEventOpenActivity =\r\n        MutableLiveData<SingleEvent<Resource<Int>>>()// if we keep this private\r\n    //then it will not be visible for test package, hence its public, annotation helped us to make our code more\r\n    //readable\r\n\r\n    val singleEventOpenActivity: LiveData<SingleEvent<Resource<Int>>> get() = privateSingleEventOpenActivity//activity\r\n    //should observe livedata because live data is immutable you cannot set its value , in this way we restrict\r\n    //activity to directly manipulate our live data ,activity should only observe the data and should not try to update\r\n    //the data, doing this we reduced the dependency between our activity and view model , it becomes loosely coupled\r\n    //we must try to make our classes communication loosely coupled , we can reuse our activity in another app\r\n    //with minimal changes if it has a same design\r\n\r\n    @FlowPreview\r\n    fun decideActivity() {\r\n        showLoading()\r\n\r\n        viewModelScope.launch(exceptionHandler) {\r\n\r\n            getRepo().isUserLoggedIn()\r\n                .flowOn(getAppDispatcher().computation())\r\n                .collect {\r\n                    hideLoading()\r\n                    if (it == LoggedInMode.LOGGED_IN_MODE_SERVER.type) {\r\n                        privateSingleEventOpenActivity.value = SingleEvent(Success(1))\r\n\r\n                    } else {\r\n                        privateSingleEventOpenActivity.value = SingleEvent(Success(2))\r\n\r\n                    }\r\n                }\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashViewModel.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashViewModel.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashViewModel.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashViewModel.kt	(date 1638159346302)
@@ -1,6 +1,7 @@
 package com.example.mvvmKotlinJetpackCompose.ui.splash
 
 import androidx.annotation.VisibleForTesting
+import androidx.annotation.VisibleForTesting.*
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.viewModelScope
@@ -27,7 +28,7 @@
     appDispatcher: DispatcherProvider,
 ) : BaseViewModel<RegistrationRepo>(registrationRepo, appDispatcher) {
 
-    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
+    @VisibleForTesting(otherwise = PRIVATE)
     val privateSingleEventOpenActivity =
         MutableLiveData<SingleEvent<Resource<Int>>>()// if we keep this private
     //then it will not be visible for test package, hence its public, annotation helped us to make our code more
Index: app/src/test/java/com/example/mvvmKotlinJetpackCompose/BaseTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose\r\n\r\nimport androidx.arch.core.executor.testing.InstantTaskExecutorRule\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseRepository\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseViewModel\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.CoroutineTestRule\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDataClassGenerator\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDispatcherProvider\r\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\r\nimport org.junit.Before\r\nimport org.junit.Rule\r\n\r\nabstract class BaseTest<Vm : BaseViewModel<Repo>, Repo : BaseRepository> {\r\n    // Subject under test\r\n    protected lateinit var viewModelUnderTest: Vm\r\n\r\n    // Use a mock Repo to be injected into the viewModel\r\n    protected lateinit var repository: Repo\r\n\r\n    protected val testDataClassGenerator: TestDataClassGenerator = TestDataClassGenerator()\r\n\r\n    // Set the main coroutines dispatcher for unit testing.\r\n    @ExperimentalCoroutinesApi\r\n    @get:Rule\r\n    open val mainCoroutineRule = CoroutineTestRule()\r\n\r\n    // Executes each task synchronously using Architecture Components.\r\n    @get:Rule\r\n    val instantExecutorRule = InstantTaskExecutorRule()\r\n\r\n\r\n    @ExperimentalCoroutinesApi\r\n    val appDispatcher = TestDispatcherProvider()\r\n\r\n    @ExperimentalCoroutinesApi\r\n    @Before\r\n    abstract fun setUp()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/BaseTest.kt b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/BaseTest.kt
--- a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/BaseTest.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/BaseTest.kt	(date 1638180056089)
@@ -4,7 +4,6 @@
 import com.example.mvvmKotlinJetpackCompose.ui.base.BaseRepository
 import com.example.mvvmKotlinJetpackCompose.ui.base.BaseViewModel
 import com.example.mvvmKotlinJetpackCompose.util.coroutines.CoroutineTestRule
-import com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDataClassGenerator
 import com.example.mvvmKotlinJetpackCompose.util.coroutines.TestDispatcherProvider
 import kotlinx.coroutines.ExperimentalCoroutinesApi
 import org.junit.Before
Index: app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivityTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivityTest.kt b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivityTest.kt
new file mode 100644
--- /dev/null	(date 1638193950802)
+++ b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/splash/SplashActivityTest.kt	(date 1638193950802)
@@ -0,0 +1,63 @@
+package com.example.mvvmKotlinJetpackCompose.ui.splash
+
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.ui.test.*
+import androidx.compose.ui.test.junit4.createAndroidComposeRule
+import com.example.mvvmKotlinJetpackCompose.R
+import com.example.mvvmKotlinJetpackCompose.ui.BaseInstrument
+import org.junit.Assert.*
+import org.junit.Rule
+import org.junit.Test
+
+@ExperimentalFoundationApi
+class SplashActivityTest : BaseInstrument(){
+
+    //    @get:Rule
+//    val composeRule=createAndroidComposeRule()//if you want to test only single composable
+
+    @get : Rule
+    val composeTestRule= createAndroidComposeRule(SplashActivity::class.java)
+
+    override fun setUp() {
+
+    }
+
+    @Test
+    fun splash_title_isDisplayed(){
+//        composeRule.setContent { //use for only single composable
+//            CoinTheme{
+//                YourCompose {
+//
+//                }
+//            }
+//
+//        }
+        composeTestRule
+            .onNodeWithText(
+                composeTestRule.activity.getString(R.string.app_name)
+            )
+            .assertIsDisplayed()
+    }
+
+
+     @Test
+    fun splash_circularProgress_isDisplayed(){
+//        composeRule.setContent { //use for only single composable
+//            CoinTheme{
+//                YourCompose {
+//
+//                }
+//            }
+//
+//        }
+         composeTestRule.onRoot().printToLog("MY TAG")
+
+         composeTestRule
+            .onNodeWithTag(composeTestRule.activity.getString(R.string.test_tag_circular_progress))
+            .assertIsDisplayed()
+    }
+
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.login\r\n\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport androidx.activity.viewModels\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.dimensionResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.SpanStyle\r\nimport androidx.compose.ui.text.buildAnnotatedString\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextDecoration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.DataError\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Resource\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseComponentActivity\r\nimport com.example.mvvmKotlinJetpackCompose.ui.dashboard.DashboardActivity\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.Shapes\r\nimport com.example.mvvmKotlinJetpackCompose.util.observe\r\nimport dagger.hilt.android.AndroidEntryPoint\r\n\r\n@AndroidEntryPoint\r\nclass LoginActivity : BaseComponentActivity<LoginViewModel>() {\r\n\r\n    override val viewModel: LoginViewModel by viewModels()\r\n\r\n//    @Inject\r\n//    lateinit var registrationComponent: RegistrationComponent\r\n//    val toDoRepository = EntryPoints\r\n//        .get(registrationComponent, RegistrationComponentEntryPoint::class.java)\r\n//        .getRegistrationRepo()\r\n\r\n\r\n\r\n    @Composable\r\n    override fun ProvideCompose() {\r\n\r\n        observe(viewModel.loginResponse) {\r\n            when (it) {\r\n                is DataError -> {\r\n                }\r\n                is Success -> {\r\n                    startDashboardAcitivty()\r\n                    finish()\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        LoginCompose {\r\n            TopImageAndText()\r\n            var txtAccountNo by remember { mutableStateOf(\"suorizwansayyed786@gmail.com\") }\r\n\r\n            TextFieldUserName(txtAccountNo) { txtAccountNo = it }\r\n            var txtPass by remember { mutableStateOf(\"SuoRizwan\") }\r\n\r\n            TextFieldPassword(txtPass) {\r\n                txtPass = it\r\n            }\r\n\r\n            RegistrationButton {\r\n                viewModel.onSignInBtnClick(txtAccountNo.trim(),\r\n                    txtPass.trim())\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Composable\r\n    private fun RegistrationButton(onClick: () -> Unit={}) {\r\n\r\n        Button(modifier = Modifier.width(dimensionResource(R.dimen.dp_150)),\r\n            colors = ButtonDefaults\r\n                .buttonColors(MaterialTheme.colors.secondary),\r\n            onClick = { onClick() }) {\r\n\r\n            Text(text = stringResource(id = R.string.sign_in).uppercase())\r\n        }\r\n\r\n        Spacer(modifier = Modifier\r\n            .height(dimensionResource(R.dimen.dp_30)))\r\n\r\n\r\n    }\r\n\r\n\r\n    @Composable\r\n    private fun TextFieldPassword(txtPass: String, setPass: (String) -> Unit={}) {\r\n\r\n\r\n        TextField(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .wrapContentHeight()\r\n            .background(shape = Shapes.medium,\r\n                color = MaterialTheme.colors.secondary),\r\n            maxLines = 1,\r\n            singleLine = true,\r\n            value = txtPass,\r\n            visualTransformation = PasswordVisualTransformation(),\r\n            onValueChange = { setPass(it) },\r\n            placeholder = {\r\n                Text(text = stringResource(R.string.password),\r\n                    color = MaterialTheme.colors.onSecondary)\r\n            },\r\n            colors = TextFieldDefaults.textFieldColors(\r\n                textColor = MaterialTheme.colors.onSecondary,\r\n                disabledTextColor = Color.Transparent,\r\n                backgroundColor = Color.Transparent,\r\n                focusedIndicatorColor = Color.Transparent,\r\n                unfocusedIndicatorColor = Color.Transparent,\r\n                disabledIndicatorColor = Color.Transparent,\r\n                cursorColor = MaterialTheme.colors.onSecondary\r\n            ),\r\n            leadingIcon = {\r\n                Icon(painter = painterResource(R.drawable.ic_baseline_lock_24),\r\n                    contentDescription = \"\", tint = MaterialTheme.colors.onSecondary)\r\n            })\r\n\r\n        Spacer(modifier = Modifier\r\n            .height(dimensionResource(id = R.dimen.dp_40)))\r\n\r\n\r\n    }\r\n\r\n    @Composable\r\n    private fun TopImageAndText() {\r\n        Image(modifier = Modifier\r\n            .padding(top = dimensionResource(id = R.dimen.dp_100))\r\n            .size(dimensionResource(id = R.dimen.dp_100)),\r\n            painter = painterResource(id = R.drawable.jetpack_logo),\r\n            contentDescription = \"\")\r\n\r\n        Spacer(modifier = Modifier.height(dimensionResource(id = R.dimen.dp_10)))\r\n\r\n        Text(modifier = Modifier.width(IntrinsicSize.Max),\r\n            textAlign = TextAlign.Center,\r\n            text = stringResource(R.string.login_title),\r\n            style = MaterialTheme.typography.button,\r\n            color = MaterialTheme.colors.secondary)\r\n\r\n        Spacer(modifier = Modifier.height(dimensionResource(id = R.dimen.dp_100)))\r\n\r\n\r\n    }\r\n\r\n    @Composable\r\n    private fun TextFieldUserName(txtAccountNo: String, setAcc: (String) -> Unit={}) {\r\n\r\n\r\n        TextField(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .wrapContentHeight()\r\n            .background(shape = Shapes.medium,\r\n                color = MaterialTheme.colors.secondary),\r\n            maxLines = 1,\r\n            singleLine = true,\r\n            value = txtAccountNo,\r\n            onValueChange = { setAcc(it) },\r\n            placeholder = {\r\n                Text(text = stringResource(R.string.acount_no),\r\n                    color = MaterialTheme.colors.onSecondary)\r\n            },\r\n            colors = TextFieldDefaults.textFieldColors(\r\n                textColor = MaterialTheme.colors.onSecondary,\r\n                disabledTextColor = Color.Transparent,\r\n                backgroundColor = Color.Transparent,\r\n                focusedIndicatorColor = Color.Transparent,\r\n                unfocusedIndicatorColor = Color.Transparent,\r\n                disabledIndicatorColor = Color.Transparent,\r\n                cursorColor = MaterialTheme.colors.onSecondary\r\n\r\n            ),\r\n            leadingIcon = {\r\n                Icon(painter = painterResource(R.drawable.ic_baseline_person_24),\r\n                    contentDescription = \"\", tint = MaterialTheme.colors.onSecondary)\r\n            })\r\n        Spacer(modifier = Modifier\r\n            .height(dimensionResource(id = R.dimen.dp_20)))\r\n\r\n\r\n    }\r\n\r\n    private fun startDashboardAcitivty() {\r\n        startActivity(Intent(this, DashboardActivity::class.java))\r\n    }\r\n\r\n    @Composable\r\n    fun LoginCompose(childrenCompose: @Composable () -> Unit) {\r\n\r\n\r\n            Column(\r\n                Modifier\r\n                    .verticalScroll(rememberScrollState())\r\n                    .fillMaxSize()\r\n                    .padding(dimensionResource(R.dimen.dp_20)),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n            ) {\r\n                childrenCompose()\r\n            }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Preview(\r\n        showBackground = true,\r\n        uiMode = Configuration.UI_MODE_NIGHT_NO\r\n    )\r\n    @Composable\r\n    override fun ProvideComposeLightPreview() {\r\n        LiquorCoinTheme {\r\n            LoginCompose {\r\n\r\n                TopImageAndText()\r\n                TextFieldUserName(\"\")\r\n                TextFieldPassword(\"\")\r\n                RegistrationButton()\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivity.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivity.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivity.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/login/LoginActivity.kt	(date 1638187182086)
@@ -1,10 +1,8 @@
 package com.example.mvvmKotlinJetpackCompose.ui.login
 
 
-import android.content.Context
 import android.content.Intent
 import android.content.res.Configuration
-import android.os.Bundle
 import androidx.activity.viewModels
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
@@ -16,25 +14,19 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.dimensionResource
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
-import androidx.compose.ui.text.AnnotatedString
-import androidx.compose.ui.text.SpanStyle
-import androidx.compose.ui.text.buildAnnotatedString
 import androidx.compose.ui.text.input.PasswordVisualTransformation
 import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.text.style.TextDecoration
 import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.sp
 import com.example.mvvmKotlinJetpackCompose.R
 import com.example.mvvmKotlinJetpackCompose.data.network.DataError
-import com.example.mvvmKotlinJetpackCompose.data.network.Resource
 import com.example.mvvmKotlinJetpackCompose.data.network.Success
 import com.example.mvvmKotlinJetpackCompose.ui.base.BaseComponentActivity
 import com.example.mvvmKotlinJetpackCompose.ui.dashboard.DashboardActivity
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
+import com.example.mvvmKotlinJetpackCompose.ui.theme.CoinTheme
 import com.example.mvvmKotlinJetpackCompose.ui.theme.Shapes
 import com.example.mvvmKotlinJetpackCompose.util.observe
 import dagger.hilt.android.AndroidEntryPoint
@@ -70,7 +62,8 @@
 
         LoginCompose {
             TopImageAndText()
-            var txtAccountNo by remember { mutableStateOf("suorizwansayyed786@gmail.com") }
+            var txtAccountNo by remember {
+                mutableStateOf("suorizwansayyed786@gmail.com") }
 
             TextFieldUserName(txtAccountNo) { txtAccountNo = it }
             var txtPass by remember { mutableStateOf("SuoRizwan") }
@@ -92,7 +85,9 @@
     @Composable
     private fun RegistrationButton(onClick: () -> Unit={}) {
 
-        Button(modifier = Modifier.width(dimensionResource(R.dimen.dp_150)),
+        Button(modifier = Modifier
+            .testTag(stringResource(id = R.string.sign_in))
+            .width(dimensionResource(R.dimen.dp_150)),
             colors = ButtonDefaults
                 .buttonColors(MaterialTheme.colors.secondary),
             onClick = { onClick() }) {
@@ -112,10 +107,13 @@
 
 
         TextField(modifier = Modifier
+            .testTag(stringResource(R.string.password))
             .fillMaxWidth()
             .wrapContentHeight()
-            .background(shape = Shapes.medium,
-                color = MaterialTheme.colors.secondary),
+            .background(
+                shape = Shapes.medium,
+                color = MaterialTheme.colors.secondary
+            ),
             maxLines = 1,
             singleLine = true,
             value = txtPass,
@@ -171,16 +169,19 @@
 
 
         TextField(modifier = Modifier
+            .testTag(stringResource(R.string.email_address))
             .fillMaxWidth()
             .wrapContentHeight()
-            .background(shape = Shapes.medium,
-                color = MaterialTheme.colors.secondary),
+            .background(
+                shape = Shapes.medium,
+                color = MaterialTheme.colors.secondary
+            ),
             maxLines = 1,
             singleLine = true,
             value = txtAccountNo,
             onValueChange = { setAcc(it) },
             placeholder = {
-                Text(text = stringResource(R.string.acount_no),
+                Text(text = stringResource(R.string.email_address),
                     color = MaterialTheme.colors.onSecondary)
             },
             colors = TextFieldDefaults.textFieldColors(
@@ -232,7 +233,7 @@
     )
     @Composable
     override fun ProvideComposeLightPreview() {
-        LiquorCoinTheme {
+        CoinTheme {
             LoginCompose {
 
                 TopImageAndText()
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/AppApiHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.data.network\r\n\r\nimport android.content.Context\r\nimport androidx.annotation.VisibleForTesting\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.DashboardResponse\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.Data\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.LoginResponse\r\nimport com.example.mvvmKotlinJetpackCompose.util.*\r\nimport dagger.hilt.android.qualifiers.ApplicationContext\r\nimport kotlinx.coroutines.delay\r\nimport retrofit2.Response\r\nimport java.io.IOException\r\nimport javax.inject.Inject\r\n\r\n\r\nclass AppApiHelper @Inject constructor(\r\n    @ApplicationContext val context: Context,\r\n    private val apiHeader: ApiHeader,\r\n) : ApiHelper {\r\n\r\n    @Inject\r\n    lateinit var serviceGenerator: ServiceGenerator\r\n\r\n    override fun getApiHeader(): ApiHeader {\r\n\r\n        return apiHeader\r\n    }\r\n\r\n    override fun updateToken(token: String) {\r\n        serviceGenerator.protectedApiHeader = getApiHeader().protectedApiHeader.apply {\r\n            accessToken = token\r\n        }\r\n\r\n    }\r\n\r\n\r\n    override fun login(email: String, password: String): Resource<LoginResponse> {\r\n//        val service = serviceGenerator.createService(Service::class.java)\r\n//\r\n//        val request = LoginRequest(email, password, \"\", \"\")\r\n//\r\n//        return when (val responseBodyPojo = processCall { service.login(request) }\r\n//        ) {\r\n//            is LoginResponse -> Success(data = responseBodyPojo)\r\n//\r\n//            else -> DataError(responseBodyPojo as String)\r\n//        }\r\n        val data = Data(\r\n            \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6InN1b3JpendhbnN\" +\r\n                    \"heXllZDc4NkBnbWFpbC5jb20iLCJuYmYiOjE2Mzc2NTE1MjMsImV4cCI6MTY0NTQyNzUyMywiaWF0\" +\r\n                    \"IjoxNjM3NjUxNTIzfQ.qKA55avNfOJMU3lHE-e88jfAVwE_T7E12cbCwXAfYAU\",\r\n            \"suorizwansayyed786@gmail.com\", \"User\"\r\n        )\r\n        return Success(LoginResponse(data, \"User login successful\", true))\r\n\r\n    }\r\n\r\n\r\n    override suspend fun getDashboardData(): Resource<DashboardResponse> {\r\n        delay(3000)\r\n\r\n//        serviceGenerator.protectedApiHeader = getApiHeader().protectedApiHeader\r\n//        val service = serviceGenerator.createService(Service::class.java)\r\n//\r\n//        return when (val response = processCall { service.getDashboardData() }) {\r\n//            is DashboardResponse -> Success(response)\r\n//            else -> DataError(response as String)\r\n//        }\r\n        val data = DashboardResponse.Data(\r\n            balanceINR = 6502.50, balanceLiqr = 260.10,\r\n            balanceUSD = 28.61, liqrToINR = 25.00, serviceCharge = 15.0, redeemBalance = 65.025000,\r\n        )\r\n        return Success(DashboardResponse(data, \"success\", true))\r\n    }\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    public inline fun processCall(responseCall: () -> Response<*>): Any? {\r\n        if (!NetworkUtils.isNetworkAvailable(context)) {\r\n\r\n            return NO_INTERNET_CONNECTION\r\n        }\r\n        return try {\r\n            val response = responseCall.invoke()\r\n            val responseCode = response.code()\r\n            if (response.isSuccessful) {\r\n                response.body()\r\n            } else {\r\n                getResponseCodeString(responseCode)\r\n            }\r\n        } catch (e: IOException) {\r\n            NETWORK_ERROR\r\n        }\r\n    }\r\n\r\n    public fun getResponseCodeString(responseCode: Int): String {\r\n        if (responseCode in 400..499) {\r\n            return CLIENT_SIDE_ERROR\r\n        } else if (responseCode in 500..599) {\r\n            return SERVER_SIDE_ERROR\r\n        }\r\n        return SOMETHING_WENT_WRONG\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/AppApiHelper.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/AppApiHelper.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/AppApiHelper.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/data/network/AppApiHelper.kt	(date 1638185679734)
@@ -35,7 +35,7 @@
 
 
     override fun login(email: String, password: String): Resource<LoginResponse> {
-//        val service = serviceGenerator.createService(Service::class.java)
+//        val service = serviceGenerator.getService()
 //
 //        val request = LoginRequest(email, password, "", "")
 //
@@ -60,7 +60,7 @@
         delay(3000)
 
 //        serviceGenerator.protectedApiHeader = getApiHeader().protectedApiHeader
-//        val service = serviceGenerator.createService(Service::class.java)
+//        val service = serviceGenerator.getService()
 //
 //        return when (val response = processCall { service.getDashboardData() }) {
 //            is DashboardResponse -> Success(response)
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">MvvmKotlinJetpackCompose</string>\r\n    <string name=\"title_activity_main\">MainActivity</string>\r\n    <string name=\"title_activity_splash\">SplashActivity</string>\r\n    <string name=\"login_title\">A demo App using kotlin, Mvvm, jetpack Compose, Unit testing.</string>\r\n    <string name=\"acount_no\">Email Address</string>\r\n    <string name=\"sign_in\">Sign In</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"hyper_link\">Forgot Password ?  Registration</string>\r\n\r\n    <string name=\"no_internet\">Please check your internet connection</string>\r\n    <string name=\"network_error\">Network error, could not get data,please try again!</string>\r\n    <string name=\"invalid_username\">Not a valid Email !</string>\r\n    <string name=\"invalid_password\">Not a valid Password !</string>\r\n    <string name=\"invalid_username_and_password\">please Enter valid username and password</string>\r\n    <string name=\"error\">Message</string>\r\n    <string name=\"title_activity_dashboard\">Dashboard</string>\r\n    <string name=\"scan_and_pay\">Scan</string>\r\n    <string name=\"title_activity_coming_soon\">ComingSoonActivity</string>\r\n    <string name=\"upi\">Upi</string>\r\n    <string name=\"kbit\">Kbit</string>\r\n    <string name=\"passbook\">passbook</string>\r\n    <string name=\"deposit\">deposit</string>\r\n    <string name=\"dashboard\">Dashboard</string>\r\n    <string name=\"logout\">Logout</string>\r\n    <string name=\"upi_id\">Upi Id</string>\r\n    <string name=\"amount\">Amount</string>\r\n    <string name=\"next\">Next</string>\r\n    <string name=\"invalid_upi\">Invalid Upi</string>\r\n    <string name=\"invalid_amnt\">Invalid Amount</string>\r\n    <string name=\"details\">Details</string>\r\n    <string name=\"liqrDeduction\">LiqrDeduction</string>\r\n    <string name=\"serviceCharge\">Service Charge</string>\r\n    <string name=\"totalDeduction\">Total Deduction</string>\r\n    <string name=\"insufficient_amount\">Insufficient Amount, Please add liqr in Wallet.</string>\r\n    <string name=\"send_otp\">Send Otp</string>\r\n    <string name=\"please_enter_otp\">Please Enter Otp</string>\r\n    <string name=\"something_went_wrong\">Something went wrong, please try again later !</string>\r\n    <string name=\"enter_otp\">Enter Otp</string>\r\n    <string name=\"pay\">Pay</string>\r\n    <string name=\"transaction_failed\">Transaction Failed</string>\r\n    <string name=\"transaction_processed\">Transaction Processed !</string>\r\n    <string name=\"transaction_pending\">Transaction Pending !</string>\r\n    <string name=\"invalid_otp\">Invalid Otp</string>\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/res/values/strings.xml	(date 1638186944129)
@@ -3,7 +3,7 @@
     <string name="title_activity_main">MainActivity</string>
     <string name="title_activity_splash">SplashActivity</string>
     <string name="login_title">A demo App using kotlin, Mvvm, jetpack Compose, Unit testing.</string>
-    <string name="acount_no">Email Address</string>
+    <string name="email_address">Email Address</string>
     <string name="sign_in">Sign In</string>
     <string name="password">Password</string>
     <string name="hyper_link">Forgot Password ?  Registration</string>
@@ -42,5 +42,8 @@
     <string name="transaction_processed">Transaction Processed !</string>
     <string name="transaction_pending">Transaction Pending !</string>
     <string name="invalid_otp">Invalid Otp</string>
+    <string name="test_tag_circular_progress">progress_tag</string>
+    <string name="drawer_test_tag">drawer_test_tag</string>
+    <string name="dashboard_content_tag">dashboard_content_tag</string>
 
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DrawerCompose.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.dashboard\r\n\r\nimport android.content.res.Configuration.UI_MODE_NIGHT_NO\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.dimensionResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\n@Composable\r\nfun DrawerCompose(\r\n    scope: CoroutineScope,\r\n    scaffoldState: ScaffoldState,\r\n    totalLiqrCoin: String,\r\n    userId: String,\r\n    logout: (String) -> Unit,\r\n) {\r\n\r\n\r\n    Column(\r\n        Modifier\r\n            .fillMaxSize()\r\n            .background(MaterialTheme.colors.onSecondary)) {\r\n        Box(contentAlignment = Alignment.Center) {\r\n\r\n\r\n            Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .background(MaterialTheme.colors.secondary)) {\r\n\r\n                Image(modifier = Modifier\r\n                    .width(100.dp)\r\n                    .height(100.dp),\r\n                    painter = painterResource(R.drawable.ic_baseline_person_24),\r\n                    contentScale = ContentScale.FillBounds,\r\n                    contentDescription = \"\")\r\n                Text(\r\n                    text = userId,\r\n                    textAlign = TextAlign.Center,\r\n                    color = MaterialTheme.colors.onSecondary,\r\n                    style = MaterialTheme.typography.body1,\r\n                )\r\n                 Text(\r\n                    text = \"Total = \"+totalLiqrCoin,\r\n                    textAlign = TextAlign.Center,\r\n                    color = MaterialTheme.colors.onSecondary,\r\n                    style = MaterialTheme.typography.body1,\r\n                )\r\n                Spacer(modifier = Modifier.height(dimensionResource(R.dimen.dp_10)))\r\n\r\n            }\r\n\r\n        }\r\n\r\n        Column(Modifier.padding(dimensionResource(R.dimen.dp_20))) {\r\n            DrawerItem(R.drawable.ic_home,\r\n                R.string.dashboard,\r\n                {\r\n                    scope.launch {\r\n                        scaffoldState.drawerState.close()\r\n                    }\r\n\r\n                })\r\n\r\n            DrawerItem(R.drawable.ic_logout,\r\n                R.string.logout,\r\n                {\r\n                    logout(\"logout\")\r\n                })\r\n\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n@Composable\r\nfun DrawerItem(icon: Int, title: Int, onClick: () -> Unit) {\r\n    Row(\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .height(dimensionResource(R.dimen.dp_60))\r\n            .clickable { onClick() },\r\n        verticalAlignment = Alignment.CenterVertically) {\r\n        Image(modifier = Modifier\r\n            .width(dimensionResource(R.dimen.dp_25))\r\n            .height(dimensionResource(R.dimen.dp_25)),\r\n            painter = painterResource(icon),\r\n            contentDescription = \"\")\r\n        Spacer(modifier = Modifier.width(dimensionResource(R.dimen.dp_15)))\r\n        Text(\r\n            text = stringResource(title),\r\n            style = MaterialTheme.typography.h6,\r\n        )\r\n\r\n    }\r\n\r\n    Divider(color = MaterialTheme.colors.primary)\r\n\r\n\r\n}\r\n\r\n@Preview(uiMode = UI_MODE_NIGHT_NO)\r\n@Composable\r\nfun Preview() {\r\n    LiquorCoinTheme {\r\n        val scaffoldState = rememberScaffoldState(rememberDrawerState(DrawerValue.Closed))\r\n        val scope = rememberCoroutineScope()\r\n\r\n        DrawerCompose(scope, scaffoldState,\r\n            \"23\",\"123\", {})\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DrawerCompose.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DrawerCompose.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DrawerCompose.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/DrawerCompose.kt	(date 1638186944123)
@@ -11,16 +11,15 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.dimensionResource
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
-import androidx.navigation.NavController
-import androidx.navigation.compose.rememberNavController
 import com.example.mvvmKotlinJetpackCompose.R
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
+import com.example.mvvmKotlinJetpackCompose.ui.theme.CoinTheme
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.launch
 
@@ -37,6 +36,7 @@
 
     Column(
         Modifier
+            .testTag(stringResource(R.string.drawer_test_tag))
             .fillMaxSize()
             .background(MaterialTheme.colors.onSecondary)) {
         Box(contentAlignment = Alignment.Center) {
@@ -123,7 +123,7 @@
 @Preview(uiMode = UI_MODE_NIGHT_NO)
 @Composable
 fun Preview() {
-    LiquorCoinTheme {
+    CoinTheme {
         val scaffoldState = rememberScaffoldState(rememberDrawerState(DrawerValue.Closed))
         val scope = rememberCoroutineScope()
 
Index: app/src/test/java/com/example/mvvmKotlinJetpackCompose/util/coroutines/TestDataClassGenerator.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/util/coroutines/TestDataClassGenerator.kt b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/TestDataClassGenerator.kt
rename from app/src/test/java/com/example/mvvmKotlinJetpackCompose/util/coroutines/TestDataClassGenerator.kt
rename to app/src/test/java/com/example/mvvmKotlinJetpackCompose/TestDataClassGenerator.kt
--- a/app/src/test/java/com/example/mvvmKotlinJetpackCompose/util/coroutines/TestDataClassGenerator.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/test/java/com/example/mvvmKotlinJetpackCompose/TestDataClassGenerator.kt	(date 1638181934800)
@@ -1,4 +1,4 @@
-package com.example.mvvmKotlinJetpackCompose.util.coroutines
+package com.example.mvvmKotlinJetpackCompose
 
 import com.example.mvvmKotlinJetpackCompose.data.network.DataError
 import com.example.mvvmKotlinJetpackCompose.data.network.Resource
@@ -8,8 +8,6 @@
 import com.example.mvvmKotlinJetpackCompose.util.NO_INTERNET_CONNECTION
 import com.squareup.moshi.JsonAdapter
 import com.squareup.moshi.Moshi
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.flow
 import java.io.File
 
 
@@ -18,10 +16,9 @@
     val moshi = Moshi.Builder().build()
 
     //generic function to  generate data classes from json file path
-    inline fun <reified T> buildDataClassFromJson(json: String): T {
+    private inline fun <reified T> buildDataClassFromJson(json: String): T {
         val jsonAdapter: JsonAdapter<T> = moshi.adapter(T::class.java)
-        val result = jsonAdapter.fromJson(json)!!
-        return result
+        return jsonAdapter.fromJson(json)!!
     }
 
 
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/TopBarCompose.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.dashboard.compose\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Menu\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.dimensionResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.ui.dashboard.MenuItemCompose\r\nimport com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.launch\r\n\r\n@Composable\r\nfun TopBar(\r\n    scope: CoroutineScope,\r\n    scaffoldState: ScaffoldState,\r\n    coin: Double,\r\n) {\r\n\r\n    TopAppBar(title = {\r\n\r\n        Text(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(end = dimensionResource(id = R.dimen.dp_15)),\r\n            textAlign = TextAlign.End,\r\n            text = \"1 coin = \"+coin+\" INR\",\r\n            color = MaterialTheme.colors.onSecondary,\r\n            style = MaterialTheme.typography.subtitle2)\r\n\r\n    },\r\n        navigationIcon = {\r\n            IconButton(onClick = {\r\n                scope.launch { scaffoldState.drawerState.open() }\r\n            }) {\r\n                Icon(Icons.Default.Menu, \"\",\r\n                    tint = MaterialTheme.colors.onSecondary)\r\n            }\r\n        },\r\n        backgroundColor = MaterialTheme.colors.secondary,\r\n        elevation = 0.dp\r\n    )\r\n\r\n\r\n}\r\n\r\n@Preview(showBackground = true,\r\n    uiMode = Configuration.UI_MODE_NIGHT_NO)\r\n@Composable\r\nfun ProvideComposeLightPreview() {\r\n    LiquorCoinTheme {\r\n        val scaffoldState = rememberScaffoldState(rememberDrawerState(DrawerValue.Closed))\r\n        val scope = rememberCoroutineScope()\r\n        TopBar(scope, scaffoldState, 20.0)\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/TopBarCompose.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/TopBarCompose.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/TopBarCompose.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/compose/TopBarCompose.kt	(date 1638172496921)
@@ -1,7 +1,6 @@
 package com.example.mvvmKotlinJetpackCompose.ui.dashboard.compose
 
 import android.content.res.Configuration
-import androidx.compose.foundation.Image
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.*
 import androidx.compose.material.icons.Icons
@@ -9,17 +8,12 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.res.dimensionResource
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import com.example.mvvmKotlinJetpackCompose.R
-import com.example.mvvmKotlinJetpackCompose.ui.dashboard.MenuItemCompose
-import com.example.mvvmKotlinJetpackCompose.ui.theme.LiquorCoinTheme
+import com.example.mvvmKotlinJetpackCompose.ui.theme.CoinTheme
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.launch
 
@@ -60,7 +54,7 @@
     uiMode = Configuration.UI_MODE_NIGHT_NO)
 @Composable
 fun ProvideComposeLightPreview() {
-    LiquorCoinTheme {
+    CoinTheme {
         val scaffoldState = rememberScaffoldState(rememberDrawerState(DrawerValue.Closed))
         val scope = rememberCoroutineScope()
         TopBar(scope, scaffoldState, 20.0)
Index: app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mvvmKotlinJetpackCompose.ui.dashboard\r\n\r\nimport androidx.annotation.VisibleForTesting\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.mvvmKotlinJetpackCompose.R\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Resource\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.Success\r\nimport com.example.mvvmKotlinJetpackCompose.data.network.model.DashboardResponse\r\nimport com.example.mvvmKotlinJetpackCompose.data.others.MenuItem\r\nimport com.example.mvvmKotlinJetpackCompose.ui.base.BaseViewModel\r\nimport com.example.mvvmKotlinJetpackCompose.util.SingleEvent\r\nimport com.example.mvvmKotlinJetpackCompose.util.coroutines.DispatcherProvider\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.collect\r\nimport kotlinx.coroutines.flow.flow\r\nimport kotlinx.coroutines.flow.flowOn\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass DashboardViewModel @Inject constructor(\r\n    repo: DashboardRepo,\r\n    appDispatcher: DispatcherProvider\r\n) :\r\n    BaseViewModel<DashboardRepo>(repo, appDispatcher) {\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    val dashboardDataPrivate = MutableLiveData<Resource<DashboardResponse>>()\r\n    val dashboardData: LiveData<Resource<DashboardResponse>> get() = dashboardDataPrivate\r\n\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    val userIdDataPrivate = MutableLiveData<Resource<String>>()\r\n    val userIdData: LiveData<Resource<String>> get() = userIdDataPrivate\r\n\r\n\r\n    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\r\n    val logoutPrivate = MutableLiveData<SingleEvent<Resource<Boolean>>>()\r\n    val logoutData: LiveData<SingleEvent<Resource<Boolean>>> get() = logoutPrivate\r\n\r\n    init {\r\n\r\n        getDashBoarData()\r\n\r\n\r\n    }\r\n\r\n     fun getDashBoarData() {\r\n\r\n        viewModelScope.launch(exceptionHandler) {\r\n            showLoading()\r\n\r\n            val dashboardData = getRepo().getDashboardData()\r\n            dashboardDataPrivate.value = dashboardData\r\n\r\n            val userId = getRepo().getUserId()\r\n            userIdDataPrivate.value = Success(userId)\r\n\r\n            hideLoading()\r\n\r\n        }\r\n    }\r\n\r\n\r\n    fun getMenuData(): List<MenuItem> = listOf(\r\n        MenuItem(R.drawable.ic_prepaid, \"Prepaid\"),\r\n        MenuItem(R.drawable.ic_postpaid, \"PostPaid\"),\r\n        MenuItem(R.drawable.ic_dtf, \"Dth\"),\r\n        MenuItem(R.drawable.ic_datacard, \"DataCard\"),\r\n        MenuItem(R.drawable.ic_gas, \"Gas\"),\r\n        MenuItem(R.drawable.ic_water, \"Water\"),\r\n        MenuItem(R.drawable.ic_electricity, \"Electricity\"),\r\n        MenuItem(R.drawable.ic_billpayment, \"Bill Payment\"),\r\n        MenuItem(R.drawable.ic_fund_recieve, \"Fun receive\"),\r\n        MenuItem(R.drawable.ic_bus, \"bus\"),\r\n        MenuItem(R.drawable.ic_flight, \"flight\"),\r\n        MenuItem(R.drawable.ic_hotel_booking, \"Hotel booking\"),\r\n    )\r\n\r\n\r\n    fun logout() {\r\n\r\n        viewModelScope.launch(exceptionHandler) {\r\n            flow {\r\n                emit(getRepo().logout())\r\n            }.flowOn(getAppDispatcher().computation())\r\n                .collect {\r\n\r\n                    logoutPrivate.value = SingleEvent(Success(true))\r\n\r\n                }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardViewModel.kt b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardViewModel.kt
--- a/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardViewModel.kt	(revision 400e104efa745da89fcbdfee4dea69bca60626a8)
+++ b/app/src/main/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardViewModel.kt	(date 1638159346280)
@@ -1,6 +1,7 @@
 package com.example.mvvmKotlinJetpackCompose.ui.dashboard
 
 import androidx.annotation.VisibleForTesting
+import androidx.annotation.VisibleForTesting.*
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.viewModelScope
@@ -26,17 +27,17 @@
 ) :
     BaseViewModel<DashboardRepo>(repo, appDispatcher) {
 
-    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
+    @VisibleForTesting(otherwise = PRIVATE)
     val dashboardDataPrivate = MutableLiveData<Resource<DashboardResponse>>()
     val dashboardData: LiveData<Resource<DashboardResponse>> get() = dashboardDataPrivate
 
 
-    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
+    @VisibleForTesting(otherwise = PRIVATE)
     val userIdDataPrivate = MutableLiveData<Resource<String>>()
     val userIdData: LiveData<Resource<String>> get() = userIdDataPrivate
 
 
-    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
+    @VisibleForTesting(otherwise = PRIVATE)
     val logoutPrivate = MutableLiveData<SingleEvent<Resource<Boolean>>>()
     val logoutData: LiveData<SingleEvent<Resource<Boolean>>> get() = logoutPrivate
 
Index: app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardActivityTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardActivityTest.kt b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardActivityTest.kt
new file mode 100644
--- /dev/null	(date 1638204287690)
+++ b/app/src/androidTest/java/com/example/mvvmKotlinJetpackCompose/ui/dashboard/DashboardActivityTest.kt	(date 1638204287690)
@@ -0,0 +1,32 @@
+package com.example.mvvmKotlinJetpackCompose.ui.dashboard
+
+import androidx.activity.ComponentActivity
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.ui.test.assertIsDisplayed
+import androidx.compose.ui.test.junit4.createAndroidComposeRule
+import androidx.compose.ui.test.onNodeWithTag
+import androidx.compose.ui.test.onNodeWithText
+import androidx.compose.ui.test.performClick
+import com.example.mvvmKotlinJetpackCompose.R
+import com.example.mvvmKotlinJetpackCompose.ui.BaseInstrument
+import com.example.mvvmKotlinJetpackCompose.ui.login.LoginActivity
+import org.junit.Assert.*
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+
+@ExperimentalFoundationApi
+class DashboardActivityTest :BaseInstrument(){
+
+
+    @get : Rule
+    val composeTestRule = createAndroidComposeRule(DashboardActivity::class.java)
+    lateinit var activity: ComponentActivity
+
+    @Before
+    override fun setUp(){
+        activity=composeTestRule.activity
+    }
+
+
+}
\ No newline at end of file
